# O Estúdio 🎤🎶

## **1️⃣ Introdução**
### **Objetivo**
O Estúdio é uma **plataforma de streaming de concertos ao vivo** projetada para conectar artistas e fãs de música. Inspirado no conceito de **Tiny Concerts**, o sistema permite aos usuários **descobrir**, **assistir** e **interagir** com performances únicas.

### **Escopo**
- **Funcionalidades principais:** Reprodução de vídeos, autenticação de usuários, gestão de artistas e ferramentas de engajamento.
- **Stack Tecnológica:** Flask + React, banco de dados SQLite, autenticação JWT e pipelines CI/CD.
- **Implantação:** Frontend hospedado no **Vercel**, backend no **Azure**.

## **2️⃣ Requisitos Funcionais e Não Funcionais**
### **Requisitos Funcionais**
- **Autenticação e cadastro de usuários** (JWT).
- **Busca e filtragem** por artista, gênero ou data.
- **Reprodução de vídeos ao vivo e gravados** com otimização.
- **Ferramentas de interação** (curtidas, comentários, favoritos).
- **Painel do artista** para gerenciamento de conteúdos.
- **Painel administrativo** para moderação de conteúdos.

### **Requisitos Não Funcionais**
- **Segurança:** Autenticação JWT, criptografia de senhas com bcrypt, uso de HTTPS.
- **Performance:** Consultas eficientes e indexação no banco de dados SQLite.
- **Escalabilidade:** Arquitetura modular, permitindo futuras expansões.

---

## **3️⃣ Arquitetura do Sistema e Diagramas Atualizados**
### **Visão Geral da Tecnologia**
- **Frontend:** React (Next.js) – Interface moderna e otimizada.
- **Backend:** Flask – API que gerencia autenticação e interações.
- **Banco de Dados:** SQLite – Armazenamento leve e eficiente.
- **CI/CD:** GitHub Actions – Testes e implantação automatizados.
- **Hospedagem:** Vercel (Frontend) + Azure (Backend).

### 🔹 **Diagrama de Caso de Uso**
**Atores e Interações:**
- **Usuário:** Buscar, assistir vídeos, interagir (curtir/comentar/favoritar).
- **Artista:** Publicar vídeos, editar detalhes e acompanhar estatísticas.
- **Administrador:** Moderar vídeos, usuários e interações.

### 🔹 **Diagramas de Sequência**
1. **Reprodução de Vídeo** – Usuário solicita um vídeo, frontend consulta backend, backend obtém metadados e inicia reprodução.
2. **Comentário em Vídeo** – Usuário envia comentário, backend armazena, UI atualiza.
3. **Favoritar Vídeo** – Usuário adiciona vídeo aos favoritos, backend salva interação.
4. **Upload de Vídeo** – Artista envia um vídeo, backend salva metadados.

### 🔹 **Diagrama ER (Estrutura do Banco de Dados)**
**Tabelas do banco de dados SQLite:**
- `users` → Autenticação e perfis.
- `videos` → Armazenamento de concertos e metadados.
- `comments` → Interações dos usuários.
- `favorites` → Vídeos favoritos.
- `likes` → Rastreamento de engajamento.
- `watch_history` → Registros de visualização.

### 🔹 **Diagrama de Componentes**
- **Frontend (React UI)** → Interface de interação.
- **Backend (Flask API)** → Processa requisições e comunica com o banco de dados.
- **Banco de Dados (SQLite)** → Armazena informações de vídeos e usuários.

### 🔹 **Diagrama de Classes**
**Principais Classes no Backend Flask:**
- `User` → Gerenciamento de autenticação e sessão.
- `Video` → Armazenamento e fluxo de streaming.
- `Comment` → Interações dos usuários.
- `Favorite` → Salvamento de vídeos favoritos.
- `Like` → Rastreamento de engajamento.
- `WatchHistory` → Registros de visualização.

---

## **4️⃣ Implantação e Configuração**
### **Instalação Local**
1. **Clonar Repositório**
   ```sh
   git clone https://github.com/seu-usuario/o-estudio.git
   cd o-estudio

